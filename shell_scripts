# moves to previous directory $1 number of times
cdb() {
	if [ -n "$1" ];
	then
		# check for numbers
		[ "$1" -eq "$1" ] 2>/dev/null || { printf "Not a valid command! :(\n" "$1" >&2; return 1; }
		END="$1"
		for ((i=1;i<=END;i++)); do cd ".."; done 
		ls;
	else
		cd "..";
		ls;
	fi
}

# moves to directory $1 then ls
cdf() {
	if [ -n "$1" ]
	then
		[[ -d "$1" ]] || { printf "Not a valid directory! :(\n" "$1" >&2; return 1; }
		cd "$1";
		ls;
	else
		cd;
		ls;
	fi
}

# uses the z plugin and then ls
zl() {
	z "$1"
	ls
}

# courtesy of github.com/cirrusUK

# EXTRACT FUNCTION | Usage: extract <file>
extract () {
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xvjf $1    ;;
          *.tar.gz)    tar xvzf $1    ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       rar x $1       ;;
          *.gz)        gunzip $1      ;;
          *.tar)       tar xvf $1     ;;
          *.tbz2)      tar xvjf $1    ;;
          *.tgz)       tar xvzf $1    ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1        ;;
          *)           echo "don't know how to extract '$1'..." ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}

# Compile and execute a C source on the fly
csource() {
	[[ $1 ]]    || { echo "Missing operand" >&2; return 1; }
	[[ -r $1 ]] || { printf "File %s does not exist or is not readable :(\n" "$1" >&2; return 1; }
	local output_path=${TMPDIR:-/tmp}/${1##*/};
	gcc "$1" -o "$output_path" && "$output_path";
	rm "$output_path";
	return 0;
}

# Compile and execute a C++ source on the fly
cpsource() {
	[[ $1 ]]    || { echo "Missing operand" >&2; return 1; }
	[[ -r $1 ]] || { printf "File %s does not exist or is not readable :(\n" "$1" >&2; return 1; }
	local output_path=${TMPDIR:-/tmp}/${1##*/};
	g++ "$1" -o "$output_path" && "$output_path";
	rm "$output_path";
	return 0;
}
